#include <gtest/gtest.h>
#include "dataframe.h" 

#define GT_TRUE(a)   ASSERT_EQ((a),true)
#define GT_FALSE(a)  ASSERT_EQ((a),false)
#define GT_EQUALS(a, b)   ASSERT_EQ(a, b)
#define ASSERT_EXIT_ZERO(a)  \
  ASSERT_EXIT(a(), ::testing::ExitedWithCode(0), ".*")
#define ASSERT_EXIT_ONE(a)  \
  ASSERT_EXIT(a(), ::testing::ExitedWithCode(1), ".*")

void test_df_set_row_lots() {
  Schema* s = new Schema("IBFFS");
  DataFrame d(*s);
  Row* r = new Row(*s);
  r->set(0, 9);
  r->set(1, (bool) true);
  r->set(2, (float) 10.0);
  r->set(3, (float) 10.0);
  r->set(4, new String("Hi")); 
  for (int i = 0; i < 50 * 1000 * 1000; i++) {
    d.add_row(*r);
  }
  d.set(0, 1000, (int) 1);
  d.set(1, 1000, (bool) false);
  d.set(2, 1000, (float) 1.0);
  d.set(3, 1000, (float) 1.0);
  d.set(4, 1000, new String("Bye"));
  GT_EQUALS((int) 1, d.get_int(0, 1000));
  GT_FALSE(d.get_bool(1, 1000));
  GT_EQUALS((float) 1.0, d.get_float(2, 1000));
  GT_EQUALS((float) 1.0, d.get_float(3, 1000));
  GT_TRUE(d.get_string(4, 1000)->equals(new String("Bye", 3)));
  exit(0);
}

TEST(st2, t0) { ASSERT_EXIT_ZERO(test_df_set_row_lots); }

int main(int argc, char **argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}