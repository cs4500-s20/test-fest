#include "dataframe.h" 
#include <gtest/gtest.h>

#define GT_TRUE(a)   ASSERT_EQ((a),true)
#define GT_FALSE(a)  ASSERT_EQ((a),false)
#define GT_EQUALS(a, b) ASSERT_EQ(a, b)

#define ASSERT_EXIT_ZERO(a)  \
  ASSERT_EXIT(a(), ::testing::ExitedWithCode(0), ".*")

class RowerCount : public Rower
{
public:
    int count;
    RowerCount() : count(0) {}

    virtual bool accept(Row &r)
    {
      count++;
      return true;
    }

    int getCount() {return count;}
};

class Rower100 : public Rower
{
public:
    int count;
    Rower100() : count(0) {}

    virtual bool accept(Row &r)
    {
      count += 100;
      return true;
    }

    int getCount() {return count;}
};

void test() {
  Schema s("II");

  DataFrame df(s);
  Row  r(df.get_schema());
  for(size_t i = 0; i <  2; i++) {
    r.set(0,(int)i);
    r.set(1,(int)i+1);
    df.add_row(r);
  }

  RowerCount rower;
  df.map(rower);
  int count = rower.getCount();
  //printf("rower count = %d\n", count);
  GT_EQUALS(count, 2);

  Rower100 rower100;
  df.map(rower100);
  count = rower100.getCount();
  //printf("rower100 = %d\n", count);

  GT_EQUALS(count, 200);
  exit(0);
}

TEST(a4, t1){ ASSERT_EXIT_ZERO(test); }

int main(int argc, char **argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
