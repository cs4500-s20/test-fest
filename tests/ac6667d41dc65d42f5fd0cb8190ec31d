#include <gtest/gtest.h>
#include "dataframe.h" 

#define GT_TRUE(a)   ASSERT_EQ((a),true)
#define GT_FALSE(a)  ASSERT_EQ((a),false)
#define GT_EQUALS(a, b)   ASSERT_EQ(a, b)
#define ASSERT_EXIT_ZERO(a)  \
  ASSERT_EXIT(a(), ::testing::ExitedWithCode(0), ".*")

/* This tests all the schema functionality */

void test() {
    Schema s("IBFS");

    //width() and length()
    GT_EQUALS(s.width(), 4); 
    GT_EQUALS(s.length(), 0);

    //col_type(size_t)
    GT_EQUALS('I', s.col_type(0));
    GT_EQUALS('B', s.col_type(1));
    GT_EQUALS('F', s.col_type(2));
    GT_EQUALS('S', s.col_type(3));

    //add_column(char, String*)
    String* name = new String("what");
    s.add_column('F', name);
    GT_EQUALS(s.width(), 5);
    GT_EQUALS('F', s.col_type(4));

    //add_row(String*)
    s.add_row(name);
    GT_EQUALS(s.length(), 1);

    //row_name(size_t)
    GT_EQUALS(name->equals(s.row_name(0)), true);

    //col_name(size_t)
    GT_EQUALS(name->equals(s.col_name(4)), true);

    //col_idx(const char*)
    GT_EQUALS(s.col_idx("what"), 4);
    GT_EQUALS(s.col_idx("huh"), -1);
    
    //row_idx(const char*)
    GT_EQUALS(s.row_idx("what"), 0);
    GT_EQUALS(s.row_idx("huh"), -1);

    //copy constructor
    Schema& s2 = s;
    Schema s3(s2);
    //Schema s3 = s2;

    GT_EQUALS(name->equals(s3.col_name(4)), true);
    GT_EQUALS(s3.col_idx("what"), 4);
    GT_EQUALS(s3.col_idx("huh"), -1);

    delete name;
    exit(0);
}

TEST(a4, t1){ ASSERT_EXIT_ZERO(test); }

int main(int argc, char **argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
