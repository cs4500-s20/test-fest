#include <gtest/gtest.h>
#include "dataframe.h" 

#define GT_TRUE(a)   ASSERT_EQ((a),true)
#define GT_FALSE(a)  ASSERT_EQ((a),false)
#define GT_EQUALS(a, b)   ASSERT_EQ(a, b)
#define ASSERT_EXIT_ZERO(a)  \
  ASSERT_EXIT(a(), ::testing::ExitedWithCode(0), ".*")

class Fielder1: public Fielder {
public:
    int lastIntSeen;
    bool lastBoolSeen;
    int row_num;

    Fielder1() {

    }

    ~Fielder1() {

    }

    /** Called before visiting a row, the argument is the row offset in the
      dataframe. */
    virtual void start(size_t r) {
        this->row_num = r;
    }

    /** Called for fields of the argument's type with the value of the field. */
    virtual void accept(bool b) {
        this->lastBoolSeen = b;
    }
    virtual void accept(float f) {
        assert(false);
    }
    virtual void accept(int i) {
        this->lastIntSeen = i;
    }
    virtual void accept(String* s) {
        assert(false);
    }

    /** Called when all fields have been seen. */
    virtual void done() {
        // empty
    }

};

TEST(a4, rowDefaultConstructor){
    // data
    Schema* schema = new Schema();
    String* col1Name = new String("identifier");
    String* col2Name = new String("status");
    String* row1Name = new String("item1");

    // add some types
    schema->add_column('I', col1Name);
    schema->add_column('B', col2Name);

    // add some rows
    schema->add_row(row1Name);

    // make a row
    Row* row1 = new Row(*schema);
    GT_EQUALS(row1->col_type(0), 'I');
    GT_EQUALS(row1->col_type(1), 'B');
    GT_EQUALS(row1->width(), 2);

    row1->set(0, 12);
    row1->set(1, true);
    // static properties should hold
    GT_EQUALS(row1->col_type(0), 'I');
    GT_EQUALS(row1->col_type(1), 'B');
    GT_EQUALS(row1->width(), 2);
    GT_EQUALS(row1->get_int(0), 12);
    GT_EQUALS(row1->get_bool(1), true);
    // try visiting
    Fielder1* fielder1 = new Fielder1();
    row1->visit(123, *fielder1);
    GT_EQUALS(fielder1->row_num, 123);
    GT_EQUALS(fielder1->lastBoolSeen, true);
    GT_EQUALS(fielder1->lastIntSeen, 12);

    delete schema;
    delete col1Name;
    delete col2Name;
    delete row1Name;
    SUCCEED();
}

int main(int argc, char **argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
