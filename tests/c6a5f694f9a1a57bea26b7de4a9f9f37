#include <gtest/gtest.h>
#include "dataframe.h" 

#define GT_TRUE(a)   ASSERT_EQ((a),true)
#define GT_FALSE(a)  ASSERT_EQ((a),false)
#define GT_EQUALS(a, b)   ASSERT_EQ(a, b)
#define ASSERT_EXIT_ZERO(a)  \
  ASSERT_EXIT(a(), ::testing::ExitedWithCode(0), ".*")

void testIntColumn() {


  IntColumn* intcol = new IntColumn();
  for (int i=0; i<500; i++) {
    intcol->push_back(i);
  }

  GT_TRUE(intcol->size() == 500);
  GT_TRUE(intcol->get(23) == 23);
  GT_TRUE(intcol->get(75) == 75);

  intcol->set(23, 1024);
  GT_TRUE(intcol->get(23) == 1024);

  GT_TRUE(intcol->get_type() == 'I');

  delete intcol;
  exit(0);

}

void testFloatColumn() {

  FloatColumn* floatcol = new FloatColumn();
  float flt = 1.4;
  for (int i=0; i<500; i++) {
    floatcol->push_back(flt * i);
  }

  GT_TRUE(floatcol->size() == 500);
  GT_TRUE(floatcol->get(0) == 0);
  GT_TRUE(floatcol->get(1)-1.4 < 0.0001);

  floatcol->set(1, 3.14);
  GT_TRUE(floatcol->get(1)-3.14 < 0.0001);

  GT_TRUE(floatcol->get_type() == 'F');

  delete floatcol;
  exit(0);

}

void testBoolColumn() {

  BoolColumn* boolcol = new BoolColumn();
  for (int i=0; i<500; i++) {
    boolcol->push_back(i % 2);
  }

  GT_TRUE(boolcol->size() == 500);
  GT_TRUE(boolcol->get(30) == 0);
  GT_TRUE(boolcol->get(57) == 1);

  boolcol->set(57, 0);
  GT_TRUE(boolcol->get(57) == 0);

  GT_TRUE(boolcol->get_type() == 'B');

  delete boolcol;
  exit(0);

}

void testStringColumn() {

  StringColumn* strcol = new StringColumn();
  for (int i=0; i<500; i++) {
    String* to_add = new String("hello");
    strcol->push_back(to_add);
  }

  String* check_string = new String("hello");

  GT_TRUE(strcol->size() == 500);
  GT_TRUE(strcol->get(30)->equals(check_string));
  GT_TRUE(strcol->get(57)->equals(check_string));


  String* replace_string = new String("world");
  strcol->set(39, replace_string);
  GT_TRUE(strcol->get(39)->equals(replace_string));

  GT_TRUE(strcol->get_type() == 'S');

  delete check_string;
  delete strcol;
  exit(0);


}

TEST(a4, t1){ ASSERT_EXIT_ZERO(testStringColumn); }
TEST(a4, t2){ ASSERT_EXIT_ZERO(testBoolColumn); }
TEST(a4, t3){ ASSERT_EXIT_ZERO(testFloatColumn); }
TEST(a4, t4){ ASSERT_EXIT_ZERO(testIntColumn); }

int main(int argc, char **argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
