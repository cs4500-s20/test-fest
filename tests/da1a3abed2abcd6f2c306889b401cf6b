#include "dataframe.h"
#include <gtest/gtest.h>

#define GT_TRUE(a) ASSERT_EQ((a), true)
#define GT_FALSE(a) ASSERT_EQ((a), false)
#define GT_EQUALS(a, b) ASSERT_EQ(a, b)
#define ASSERT_EXIT_ZERO(a) ASSERT_EXIT(a(), ::testing::ExitedWithCode(0), ".*")

/**
 * This test looks at if values in the DataFrame can be properly set and updated
 * after rows are added, given that the new values to be set are replacing
 * values of the same type (int, float, String, bool).
 *
 * After adding two rows of data with the same Schema as the DataFrame, we check
 * the status of the DataFrame in regards to its row and column count. Then we
 * check to see that the right values were stored. Afterwards, we update these
 * values to new ones and check them again.
 */

void test_set_on_mult_rows() {
  Schema *sc = new Schema("BII");
  DataFrame *df = new DataFrame(*sc);
  Row *row1 = new Row(*sc);
  Row *row2 = new Row(*sc);
  row1->set(0, true);
  row1->set(1, 3);
  row1->set(2, 237);
  row2->set(0, false);
  row2->set(1, 20);
  row2->set(2, 9119);

  df->add_row(*row1);
  df->add_row(*row2);

  GT_EQUALS(df->nrows(), 2);
  GT_EQUALS(df->ncols(), 3);
  GT_EQUALS(df->get_int(2, 0), 237);
  GT_EQUALS(df->get_bool(0, 1), false);

  df->set(2, 0, 454);
  df->set(0, 1, true);

  GT_EQUALS(df->get_int(2, 0), 454);
  GT_EQUALS(df->get_bool(0, 1), true);
  exit(0);
}

TEST(a4, t1) { ASSERT_EXIT_ZERO(test_set_on_mult_rows); }

int main(int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
