#include <gtest/gtest.h>
#include "dataframe.h" 

// Lang::CwC
// Authors: Samedh Gupta <gupta.sam@husky.neu.edu>
//          Thomas Harmon <harmon.t@husky.neu.edu>

#define GT_TRUE(a)   ASSERT_EQ((a),true)
#define GT_FALSE(a)  ASSERT_EQ((a),false)
#define GT_EQUALS(a, b)   ASSERT_EQ(a, b)
#define ASSERT_EXIT_ZERO(a)  \
  ASSERT_EXIT(a(), ::testing::ExitedWithCode(0), ".*")

void test() {
  Schema s("IBSF");
  // Correct types in the schema
  GT_EQUALS(s.col_type(0), 'I');
  GT_EQUALS(s.col_type(1), 'B');
  GT_EQUALS(s.col_type(2), 'S');
  GT_EQUALS(s.col_type(3), 'F');
  // Column names must be nullptr
  GT_EQUALS(s.col_name(0), nullptr);
  GT_EQUALS(s.col_name(1), nullptr);
  GT_EQUALS(s.col_name(2), nullptr);
  GT_EQUALS(s.col_name(3), nullptr);
  //
  GT_EQUALS(s.width(), 4);
  GT_EQUALS(s.length(), 0);
  // add a named column
  s.add_column('I', new String("new int column"));
  GT_EQUALS(s.width(), 5);
  GT_EQUALS(s.col_type(4), 'I');
  GT_TRUE(s.col_name(4)->equals(new String("new int column")));
  GT_EQUALS(s.length(), 0);
  GT_EQUALS(s.col_idx("new int column"), 4);
  // add a 100_000 row
  int num_to_add = 100000;
  char* buff = new char[10];
  for(int i = 0; i < num_to_add; i++) {
    sprintf(buff, "row %i", i);
    s.add_row(new String(buff));
  }
  GT_EQUALS(s.length(), num_to_add);
  GT_TRUE(s.row_name(10)->equals(new String("row 10")));
  GT_EQUALS(s.row_idx("row 99000"), 99000);
  exit(0);
}

TEST(a4, t1){ ASSERT_EXIT_ZERO(test); }

int main(int argc, char **argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
